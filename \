import pandas as pd
import numpy as np
from pprint import pprint
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

data = pd.read_csv("training.csv")


def plotNum(ind):
    plt.imshow(np.reshape(np.array(data.iloc[ind,1:]), (28, 28)), cmap="gray")


#plt.figure()
#for ii in range(1,17):
#    plt.subplot(4,4,ii)
#    plotNum(ii)
#plt.show()



X = data.iloc[:, 1:]
y = data['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

n_neighbors = [int(x) for x in np.linspace(start = 5, stop = 31, num = 20)]
weights = ['uniform', 'distance']
algorithm = {'auto', 'ball_tree', 'kd_tree', 'brute'}
leaf_size = [int(x) for x in np.linspace(start=30, stop=400, num = 10)]

random_grid = {'n_neighbors':n_neighbors,'weights': weights,'algorithm': algorithm,'leaf_size': leaf_size}

knc = KNeighborsClassifier()
knc_random = GridSearchCV(knc, random_grid, cv=3)
knc_random.fit(X_train, y_train)
print(knc_random.best_params_)
best_random = knc_random.best_estimator_
y_predict_knc = knc_random.predict(X_test)
y_predict_knc_best_random = best_random.predict(X_test)

acc_random = accuracy_score(y_test, y_predict_knc_best_random)
acc_knc = accuracy_score(y_test, y_predict_knc)
print(acc_knc)


#print(rfc.get_params(deep=True))
